Input file: Test.ss
program function called
   1: (define (arithmetic a b c)
	LPAREN_T        (
	DEFINE_T        define
	LPAREN_T        (
	IDENT_T         arithmetic
	IDENT_T         a
	IDENT_T         b
	IDENT_T         c
	RPAREN_T        )
   2:   (if (not (= 0 b))
	LPAREN_T        (
	IF_T            if
	LPAREN_T        (
	NOT_T           not
	LPAREN_T        (
	EQUALTO_T       =
	NUMLIT_T        0
	IDENT_T         b
	RPAREN_T        )
	RPAREN_T        )
   3:       (+ (/ (* a (- b c)) 2) (- (/ a b) 2 c))
	LPAREN_T        (
	PLUS_T          +
	LPAREN_T        (
	DIV_T           /
	LPAREN_T        (
	MULT_T          *
	IDENT_T         a
	LPAREN_T        (
	MINUS_T         -
	IDENT_T         b
	IDENT_T         c
	RPAREN_T        )
	RPAREN_T        )
	NUMLIT_T        2
	RPAREN_T        )
	LPAREN_T        (
	MINUS_T         -
	LPAREN_T        (
	DIV_T           /
	IDENT_T         a
	IDENT_T         b
	RPAREN_T        )
	NUMLIT_T        2
	IDENT_T         c
	RPAREN_T        )
	RPAREN_T        )
   4:       (+ (/ (* a (- b c)) 2) (- (/ a 4) 2 c))
	LPAREN_T        (
	PLUS_T          +
	LPAREN_T        (
	DIV_T           /
	LPAREN_T        (
	MULT_T          *
	IDENT_T         a
	LPAREN_T        (
	MINUS_T         -
	IDENT_T         b
	IDENT_T         c
	RPAREN_T        )
	RPAREN_T        )
	NUMLIT_T        2
	RPAREN_T        )
	LPAREN_T        (
	MINUS_T         -
	LPAREN_T        (
	DIV_T           /
	IDENT_T         a
	NUMLIT_T        4
	RPAREN_T        )
	NUMLIT_T        2
	IDENT_T         c
	RPAREN_T        )
	RPAREN_T        )
   5:       )
	RPAREN_T        )
   6:   )
	RPAREN_T        )
   7: 
   8: (define (concat l1 l2)
	LPAREN_T        (
	DEFINE_T        define
	LPAREN_T        (
	IDENT_T         concat
	IDENT_T         l1
	IDENT_T         l2
	RPAREN_T        )
   9:   (if (null? l1)
	LPAREN_T        (
	IF_T            if
	LPAREN_T        (
	NULLP_T         null?
	IDENT_T         l1
	RPAREN_T        )
  10:       l2
	IDENT_T         l2
  11:       (cons (car l1) (concat (cdr l1) l2))
	LPAREN_T        (
	CONS_T          cons
	LPAREN_T        (
	LISTOP_T        car
	IDENT_T         l1
	RPAREN_T        )
	LPAREN_T        (
	IDENT_T         concat
	LPAREN_T        (
	LISTOP_T        cdr
	IDENT_T         l1
	RPAREN_T        )
	IDENT_T         l2
	RPAREN_T        )
	RPAREN_T        )
  12:       )
	RPAREN_T        )
  13:   )
	RPAREN_T        )
  14: 
  15: (define (listops1 sym ls1 ls2)
	LPAREN_T        (
	DEFINE_T        define
	LPAREN_T        (
	IDENT_T         listops1
	IDENT_T         sym
	IDENT_T         ls1
	IDENT_T         ls2
	RPAREN_T        )
  16:   (cons sym (concat ls1 ls2))
	LPAREN_T        (
	CONS_T          cons
	IDENT_T         sym
	LPAREN_T        (
	IDENT_T         concat
	IDENT_T         ls1
	IDENT_T         ls2
	RPAREN_T        )
	RPAREN_T        )
  17:   )
	RPAREN_T        )
  18: 
  19: (define (listops2 ls)
	LPAREN_T        (
	DEFINE_T        define
	LPAREN_T        (
	IDENT_T         listops2
	IDENT_T         ls
	RPAREN_T        )
  20:   (if (not (list? ls))
	LPAREN_T        (
	IF_T            if
	LPAREN_T        (
	NOT_T           not
	LPAREN_T        (
	LISTP_T         list?
	IDENT_T         ls
	RPAREN_T        )
	RPAREN_T        )
  21:       'argument_must_be_a_list
	QUOTE_T         '
	IDENT_T         argument_must_be_a_list
  22:       (caddr (cdddr ls))
	LPAREN_T        (
	LISTOP_T        caddr
	LPAREN_T        (
	LISTOP_T        cdddr
	IDENT_T         ls
	RPAREN_T        )
	RPAREN_T        )
  23:       )
	RPAREN_T        )
  24:   )
	RPAREN_T        )
  25: 
  26: (define (main)
	LPAREN_T        (
	DEFINE_T        define
	LPAREN_T        (
	IDENT_T         main
	RPAREN_T        )
  27:   (display (arithmetic 5 7 9))
	LPAREN_T        (
	DISPLAY_T       display
	LPAREN_T        (
	IDENT_T         arithmetic
	NUMLIT_T        5
	NUMLIT_T        7
	NUMLIT_T        9
	RPAREN_T        )
	RPAREN_T        )
  28:   (newline)
	LPAREN_T        (
	NEWLINE_T       newline
	RPAREN_T        )
  29:   (display (arithmetic 5 0 9))
	LPAREN_T        (
	DISPLAY_T       display
	LPAREN_T        (
	IDENT_T         arithmetic
	NUMLIT_T        5
	NUMLIT_T        0
	NUMLIT_T        9
	RPAREN_T        )
	RPAREN_T        )
  30:   (newline)
	LPAREN_T        (
	NEWLINE_T       newline
	RPAREN_T        )
  31:   (display (listops1 5 '(aa bb cc) '(1 3 5 7 11 13)))
	LPAREN_T        (
	DISPLAY_T       display
	LPAREN_T        (
	IDENT_T         listops1
	NUMLIT_T        5
	QUOTE_T         '
	LPAREN_T        (
	IDENT_T         aa
	IDENT_T         bb
	IDENT_T         cc
	RPAREN_T        )
	QUOTE_T         '
	LPAREN_T        (
	NUMLIT_T        1
	NUMLIT_T        3
	NUMLIT_T        5
	NUMLIT_T        7
	NUMLIT_T        11
	NUMLIT_T        13
	RPAREN_T        )
	RPAREN_T        )
	RPAREN_T        )
  32:   (newline)
	LPAREN_T        (
	NEWLINE_T       newline
	RPAREN_T        )
  33:   (display (listops2 '(a b c (d e f g) h i j)))
	LPAREN_T        (
	DISPLAY_T       display
	LPAREN_T        (
	IDENT_T         listops2
	QUOTE_T         '
	LPAREN_T        (
	IDENT_T         a
	IDENT_T         b
	IDENT_T         c
	LPAREN_T        (
	IDENT_T         d
	IDENT_T         e
	IDENT_T         f
	IDENT_T         g
	RPAREN_T        )
	IDENT_T         h
	IDENT_T         i
	IDENT_T         j
	RPAREN_T        )
	RPAREN_T        )
	RPAREN_T        )
  34:   (newline)
	LPAREN_T        (
	NEWLINE_T       newline
	RPAREN_T        )
  35:   (display (listops2 'a))
	LPAREN_T        (
	DISPLAY_T       display
	LPAREN_T        (
	IDENT_T         listops2
	QUOTE_T         '
	IDENT_T         a
	RPAREN_T        )
	RPAREN_T        )
  36:   (newline)
	LPAREN_T        (
	NEWLINE_T       newline
	RPAREN_T        )
  37:   )
	RPAREN_T        )
program function returning 0 errors
0 errors found in input file
